'''

SOLVE:

    Given an array of integers your solution should find the smallest integer.
                                                                                                    


EXAMPLES:

    Given [34, 15, 88, 2] your solution will return 2
    Given [34, -345, -1, 100] your solution will return -345
    You can assume, for the purpose of this kata, that the supplied array will not be empty.
                                                                                                    




'''


def find_smallest_int(arr):
    
    getmin = min(arr)
    print(getmin)
    return getmin

find_smallest_int([23,45,1,-2,7,8])


'''
####################################################################################################


# sort function in this case most likely sorts the numbers from minimum to maximum


def findSmallestInt(arr):
    #sort array
    arr.sort()
    return arr[0]




####################################################################################################


# this one operates by comparing the two integers by use of '<' less than operator
# and then replaces the smallest number in the array 'smallest' before returning its value after 
# it has iterated through the entire array by use of a for loop 'for i in range(0,len(arr)):

def findSmallestInt(arr):
    smallest = []
    for i in range(0,len(arr)):
        if (arr[i] < smallest):
            smallest = arr[i]
    return smallest






####################################################################################################


# this script simply does the same thing with the sort function but before that checks if it is an integer with 'assert'

def findSmallestInt(arr):
    """
    input: arr, a list of integers
    output: smallest integer in arr
    """
    
    # check that each element is an int
    for num in arr:
        assert type(num) == int
    
    # sort array
    arr.sort()
    
    # return smallest value
    return arr[0]






####################################################################################################




sudo crunch 8 12 abcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()_-=+[{]}\|;:'",<.>/?


def findSmallestInt(arr):
    min = arr[0]
    for item in arr:
        if min > item:
            min = item
    return min







####################################################################################################







def find_smallest_int(arr):
    return sorted(arr)[0]






####################################################################################################



# utilizing a lambda function 


def findSmallestInt(arr):
    #Code here
    return reduce(lambda x,y: x if x<y else y, arr) 






####################################################################################################




findSmallestInt = lambda a: sorted(a)[0]







####################################################################################################





class IntArr():
    def __init__(self, arr = []): # initialize
        self.arr = arr
        
    def Length(self): # find length of arr
        c = 0
        
        for i in self.arr:
            c += 1
        
        return c
        
    def checkArr(self): # checks array 
        c = 0
        
        for i in self.arr:
            if type(i) != type(0):
                raise Exception("Are you stupid????????? The class called IntArr!!!!!!!!!!!! Array of INTEGERS!!!!!!!!!!!")
            else:
                c += 1
                
        if c != len(self.arr):
            raise Exception("WTF??????????")
    
    def summArr(self):
        self.checkArr()
        
        summ = 0
        
        for i in self.arr:
            summ += i
            
        return summ # returns integer ([] => 0)
    
    def findMax(self, n):
        self.checkArr()
        
        arr = self.arr
        
        if n < 1:
            print("Why are you so stupid?????????")
            return []
        
        maxes = [0] * n
        max = -1e100
        
        for _ in range(n-1, -1, -1): # find the maximum vulue
            for i in arr:
                if max < i:
                    max = i
            maxes[_] = max
            del arr[arr.index(max)]
            max = -1e100
            
        return maxes # returns sorted array of n max values (if n < 1 returns [])
    
    def findMin(self, n):
        self.checkArr()
        
        arr = self.arr
        
        if n < 1:
            print("Why are you so stupid?????????")
            return []
        
        mins = [0] * n
        min = 1e100
        
        for _ in range(n): # find the maximum vulue
            for i in arr:
                if min > i:
                    min = i
            mins[_] = min
            del arr[arr.index(min)]
            min = 1e100
            
        return mins # returns sorted array of n min values (if n < 1 returns [])
    
    def Sort(self): # sorts with no changing of main array
        self.checkArr()
        
        # I can use sorted() or .sort(), but it's not interesting
        array = self.arr
        
        # If the input array contains fewer than two elements,
        # then return it as the result of the function
        if len(array) < 2:
            return array
        
        low, same, high = [], [], []
        
        # Select your `pivot` element randomly
        pivot = array[randint(0, len(array) - 1)]
        
        for i in array:
            # Elements that are smaller than the `pivot` go to
            # the `low` list. Elements that are larger than
            # `pivot` go to the `high` list. Elements that are
            # equal to `pivot` go to the `same` list.
            
            if i < pivot:
                low.append(i)
            elif i == pivot:
                same.append(i)
            elif i > pivot:
                high.append(i)
                
            # The final result combines the sorted `low` list
            # with the `same` list and the sorted `high` list
            
        return self.Sort(low) + same + self.Sort(high)
    
def find_smallest_int(a):
    # I can use many ways: 1) sorted_array[0]; 2) arr.findMin() and etc., but it doesn't interesting
    # It is my favourite :)
    intarr = IntArr() 
    intarr.arr = a;
    
    length = intarr.Length()
    summ = intarr.summArr()
    maxes = intarr.findMax(length-1)
    ans = 0
    ans += summ
    
    for i in maxes:
        ans -= i
    
    return ans








####################################################################################################






def find_smallest_int(arr):
    element = arr.pop()
    for e in arr:
        if e < element:
            element = e
    return element







####################################################################################################







import sys

def find_smallest_int(arr):
    my_int = sys.maxsize
    for integer in arr:
        if integer < my_int:
            my_int = integer
    return my_int







####################################################################################################





def find_smallest_int(arr):
    x = None
    for i in arr:
        if x == None or i < x:
            x = i
    return x






####################################################################################################







from builtins import min as find_smallest_int








####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
                                                                                                    '''